from decouple import config
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from pyowm import OWM
from pyowm.utils.config import get_default_config
import requests
import random
import os

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config('api_key'))
dp = Dispatcher(bot, storage=MemoryStorage())

#–ö–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–≥–æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
config_dict = get_default_config()
config_dict['language'] = 'ru'
owm = OWM(config('weather_api'))

#–°–æ—Å—Ç–æ—è–Ω–∏—è
class SelectButton(StatesGroup):
    wait_button = State()
    wait_town = State()
    wait_currency = State()
    wait_amount = State()
    wait_poll_question = State()
    wait_options = State()
    wait_corrent_option = State()
    wait_anonimus = State()
    wait_chat_id = State()

#–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç. —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω—É–∂–Ω–æ –æ—Ç –±–æ—Ç–∞.
@dp.message_handler(Text(equals='‚¨Ö'))
@dp.message_handler(state=SelectButton.wait_button)
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    weather_button = types.KeyboardButton(text="–ü–æ–≥–æ–¥–∞ üå§")
    keyboard.add(weather_button)
    
    currency_converter_button = types.KeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ç–æ—Ä –≤–∞–ª—é—Ç üí≤")
    keyboard.add(currency_converter_button)

    random_picture_button = types.KeyboardButton(text="–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ üèû")
    keyboard.add(random_picture_button)

    polls_button = types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å ‚ùì")
    keyboard.add(polls_button)
    
    await state.finish()
    await message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)

#–ü–æ–≥–æ–¥–∞. –£—Ç–æ—á–Ω—è–µ—Ç –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.
@dp.message_handler(Text(equals='–ü–æ–≥–æ–¥–∞ üå§'))
async def entry_weather_message(message: types.Message, state: FSMContext):

    keyboard_to_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    left_button = types.KeyboardButton('‚¨Ö')
    keyboard_to_main.add(left_button)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥.', reply_markup=keyboard_to_main)
    await state.set_state(SelectButton.wait_town.state)

#–ü–æ–≥–æ–¥–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —É–∫–∞–∑–∞–Ω–æ–º –≥–æ—Ä–æ–¥–µ.
@dp.message_handler(state=SelectButton.wait_town)
async def track_weather(message: types.Message, state: FSMContext):
    keyboard_to_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    left_button = types.KeyboardButton('‚¨Ö')
    keyboard_to_main.add(left_button)

    if message.text != '‚¨Ö':
        try:
            mgr = owm.weather_manager()
            observation = mgr.weather_at_place(message.text)
            w = observation.weather

            await message.answer(f"{message['text']}: {round(w.temperature('celsius')['temp'])}¬∞C")
            await state.set_state(SelectButton.wait_button.state)
        except:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!', reply_markup=keyboard_to_main)
            await state.set_state(SelectButton.wait_town.state)
    else:
        await state.set_state(SelectButton.wait_button)

#–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ç–æ—Ä –≤–∞–ª—é—Ç. —É—Ç–æ—á–Ω—è–µ—Ç –ø–∞—Ä—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(Text(equals='–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ç–æ—Ä –≤–∞–ª—é—Ç üí≤'))
async def converter(message: types.Message, state:FSMContext):

    keyboard_to_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    left_button = types.KeyboardButton('‚¨Ö')
    keyboard_to_main.add(left_button)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥—ã –≤–∞–ª—é—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: USD RUB', reply_markup=keyboard_to_main)
    await state.set_state(SelectButton.wait_currency.state)

#–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ç–æ—Ä –≤–∞–ª—é—Ç. –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã —Å–æ–∑–¥–∞—ë—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∏ —É—Ç–æ—á–Ω—è–µ—Ç —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
@dp.message_handler(state=SelectButton.wait_currency)
async def amount(message: types.Message, state: FSMContext):
    global currency_1_code, currency_1_value, currency_2_code, currency_2_value

    keyboard_to_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    left_button = types.KeyboardButton('‚¨Ö')
    keyboard_to_main.add(left_button)
    
    if message.text != '‚¨Ö':
        try:
            currency_url = f"https://open.er-api.com/v6/latest/USD"
            response = requests.get(currency_url)
            data = response.json()
            couple = data['rates']

            for i in couple.keys():
                if i == str(message['text'][0:3:1]):
                    currency_1_code = str(message['text'][0:3:1])
                    currency_1_value = couple[str(message['text'][0:3:1])]
                if i == str(message['text'][4::1]):
                    currency_2_code = str(message['text'][4::1])
                    currency_2_value = couple[str(message['text'][4::1])]

            await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {currency_1_code}', reply_markup=keyboard_to_main)
            await state.set_state(SelectButton.wait_amount.state)

        except:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–∞—Ä—É', reply_markup=keyboard_to_main)
            await state.set_state(SelectButton.wait_currency.state)
    else:
        await state.set_state(SelectButton.wait_button)

#–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
@dp.message_handler(state=SelectButton.wait_amount)
async def converter(message: types.Message, state: FSMContext):
    if message.text != '‚¨Ö':    
        try:
            amount = int(message['text'])
            amount = amount / currency_1_value
            amount = round(amount * currency_2_value, 2)

            await message.answer(f'{message["text"]} {currency_1_code} = {amount} {currency_2_code}')
            await state.set_state(SelectButton.wait_button.state)
        except:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!')
            await state.set_state(SelectButton.wait_amount.state)


#–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
@dp.message_handler(Text(equals="–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ üèû"))
async def send_random_image(message: types.Message):
    photo = open('images/' + random.choice(os.listdir('images')), 'rb')

    await bot.send_photo(message.from_user.id, photo)
    
#–ù–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
@dp.message_handler(Text(equals="–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å ‚ùì"))
async def entry_create_poll(message: types.Message, state: FSMContext):
    global type_quiz

    keyboard_to_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    left_button = types.KeyboardButton('‚¨Ö')
    keyboard_to_main.add(left_button)

    type_quiz = 'quiz'
    if message.text != '‚¨Ö':
        await message.answer('1. –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞', reply_markup=keyboard_to_main)
        await state.set_state(SelectButton.wait_poll_question)
    else:
        await state.set_state(SelectButton.wait_button)

#–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
@dp.message_handler(state=SelectButton.wait_poll_question)
async def question_for_poll(message: types.Message, state: FSMContext):
    global question_quiz

    keyboard_to_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    left_button = types.KeyboardButton('‚¨Ö')
    keyboard_to_main.add(left_button)

    question_quiz = message.text

    if message.text != '‚¨Ö':
        await message.answer('2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö', reply_markup=keyboard_to_main)
        await state.set_state(SelectButton.wait_options)
    else:
        await state.set_state(SelectButton.wait_button)


#–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
@dp.message_handler(state=SelectButton.wait_options)
async def options_for_poll(message: types.Message, state: FSMContext):
    global options_quiz

    keyboard_to_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    left_button = types.KeyboardButton('‚¨Ö')
    keyboard_to_main.add(left_button)

    options_quiz = message.text.split('\n')

    if message.text != '‚¨Ö':
        await message.answer('3. –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º? (–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É)', reply_markup=keyboard_to_main)
        await state.set_state(SelectButton.wait_corrent_option)
    else:
        await state.set_state(SelectButton.wait_button)

#–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±—É–¥–µ—Ç –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π
@dp.message_handler(state=SelectButton.wait_corrent_option)
async def correct_option_for_poll(message: types.Message, state: FSMContext):
    global correct_option

    keyboard_to_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    left_button = types.KeyboardButton('‚¨Ö')
    keyboard_to_main.add(left_button)

    if message.text != '‚¨Ö':
        try:
            correct_option = int(message.text)
            
            await message.answer('4. –ë—É–¥–µ—Ç –ª–∏ –æ–ø—Ä–æ—Å –∞–Ω–æ–Ω–∏–º–Ω—ã–º? (–î–∞ –∏–ª–∏ –ù–µ—Ç)', reply_markup=keyboard_to_main)
            await state.set_state(SelectButton.wait_anonimus)
        except:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É!')
            await state.set_state(SelectButton.wait_corrent_option)
    else:
        await state.set_state(SelectButton.wait_button)

#–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –æ–ø—Ä–æ—Å
@dp.message_handler(state=SelectButton.wait_anonimus)
async def is_anonimus_poll(message: types.Message, state: FSMContext):
    global anonimus

    keyboard_to_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    left_button = types.KeyboardButton('‚¨Ö')
    keyboard_to_main.add(left_button)

    if message.text != '‚¨Ö':
        if message.text.lower == '–¥–∞' or message.text.lower == '–Ω–µ—Ç':
            anonimus = message.text
            if anonimus.lower() == '–¥–∞':
                anonimus = True
            elif anonimus.lower() == '–Ω–µ—Ç':
                anonimus = False
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"!')
            await state.set_state(SelectButton.wait_anonimus)

        await message.answer('5. –í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å —Å —Ç–∏—Ä–µ –ø–µ—Ä–µ–¥ ID, –ù–∞–ø—Ä–∏–º–µ—Ä: -100200300', reply_markup=keyboard_to_main)
        await state.set_state(SelectButton.wait_chat_id)
    else:
        await state.set_state(SelectButton.wait_button)
    

#–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –≤—Å—ë —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ
@dp.message_handler(state=SelectButton.wait_chat_id)
async def send_poll(message: types.Message, state: FSMContext):
    if message.text != '‚¨Ö':
        try:
            chat_id = message.text

            await bot.send_poll(chat_id=chat_id,
                            question=question_quiz,
                            options=options_quiz,
                            correct_option_id=correct_option,
                            is_anonymous=anonimus
                            )
            state.set_state(SelectButton.wait_button.state)
        except:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞!')
            await state.set_state(SelectButton.wait_chat_id)
    else:
        await state.set_state(SelectButton.wait_button)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)